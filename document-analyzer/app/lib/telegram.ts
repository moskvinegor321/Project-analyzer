import { config } from '@/app/lib/config';

export async function callTelegram(method: string, payload: any) {
  const url = `https://api.telegram.org/bot${config.telegram.botToken}/${method}`;
  const res = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  });
  if (!res.ok) throw new Error('Telegram API error');
  return res.json();
}

export async function sendChannelMessage(text: string, replyMarkup?: any) {
  return callTelegram('sendMessage', {
    chat_id: config.telegram.channelId,
    message_thread_id: config.telegram.threadId || undefined,
    text,
    parse_mode: 'Markdown',
    reply_markup: replyMarkup,
  });
}

export async function answerCallbackQuery(id: string, text?: string) {
  return callTelegram('answerCallbackQuery', { callback_query_id: id, text, show_alert: false });
}

export function buildChannelPost(payload: any, analysis: any, notionUrl: string) {
  const lines = [
    'üîç **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**',
    '',
    `**–ü—Ä–æ–µ–∫—Ç:** ${payload.projectName}`,
    `**–ó–∞—è–≤–∏—Ç–µ–ª—å:** ${payload.telegramUsername}`,
    '',
    '**üìã –î–µ—Ç–∞–ª–∏:**',
    `‚Ä¢ **–ü—Ä–æ—Ü–µ—Å—Å:** ${analysis.process || '‚Äî'}`,
    `‚Ä¢ **–¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:** ${(analysis.documentTypes || []).join(', ') || '‚Äî'}`,
    `‚Ä¢ **–û–±—ä—ë–º:** ${analysis.volumePages?.raw || '‚Äî'}`,
    `‚Ä¢ **ARR:** ${analysis.arrRub || '‚Äî'} ‚ÇΩ`,
    `‚Ä¢ **ACV:** ${analysis.acvRub || '‚Äî'} ‚ÇΩ`,
    `‚Ä¢ **–†–∞–∑–º–µ—â–µ–Ω–∏–µ:** ${analysis.placement || '‚Äî'}`,
    '',
    '**üéØ –û—Ü–µ–Ω–∫–∞:**',
    `‚Ä¢ **–†–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å:** ${analysis.feasibility} (${Math.round(analysis.confidence * 100)}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`,
    `‚Ä¢ **–°—Ä–æ–∫–∏:** ${analysis.estimatedTimeline}`,
    `‚Ä¢ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏:** ${(analysis.missingRequirements || []).slice(0,3).join(', ')}`,
    '',
    '**üîó –°—Å—ã–ª–∫–∏:**',
    `‚Ä¢ [–ö–≤–æ—Ç–∞](${payload.quotaLink})`,
    payload.tzLink ? `‚Ä¢ [–¢–ó](${payload.tzLink})` : '',
    payload.pipedriveLink ? `‚Ä¢ [Pipedrive](${payload.pipedriveLink})` : '',
    payload.examplesLink ? `‚Ä¢ [–ü—Ä–∏–º–µ—Ä—ã](${payload.examplesLink})` : '',
    `‚Ä¢ [–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª](${analysis.links?.blob || payload.blobUrl})`,
    '',
    `üìä **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:** ${notionUrl}`,
  ].filter(Boolean);
  return lines.join('\n');
} 